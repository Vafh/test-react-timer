{"version":3,"sources":["components/App.js","index.js"],"names":["App","useState","timerDays","setTimerDays","timerHours","setTimerHours","timerMins","setTimerMins","timerSecs","setTimerSecs","interval","useRef","useEffect","count","Date","getTime","setInterval","distans","now","renderDays","Math","floor","renderHours","renderMins","renderSecs","clearInterval","current","startTimer","className","id","ReactDOM","render","document","getElementById"],"mappings":"gMAoEeA,EAjEH,WACV,MAAkCC,mBAAS,MAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCF,mBAAS,MAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAAkCJ,mBAAS,MAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KACA,EAAiCN,mBAAS,MAA1C,mBAAOO,EAAP,KAAkBC,EAAlB,KAEIC,EAAWC,mBA8Bf,OAPFC,qBAAU,WAER,OAxBmB,WACjB,IAAMC,EAAQ,IAAIC,KAAK,wBAAwBC,UAC/CL,EAAWM,aAAY,WACrB,IACMC,EADMH,KAAKI,MACML,EACjBM,EAAaC,KAAKC,MAAMJ,EAAO,OAC/BK,EAAcF,KAAKC,MACtBJ,EAAO,MAAR,MAEIM,EAAaH,KAAKC,MAAOJ,EAAO,KAAR,KACxBO,EAAaJ,KAAKC,MAAOJ,EAAO,IAAkB,KACpDA,EAAU,EACZQ,cAAcf,EAASgB,UAEvBvB,EAAagB,GACbd,EAAciB,GACdf,EAAagB,GACbd,EAAae,MAEd,KAILG,GACO,WACLF,cAAcf,EAASgB,aAKvB,mCACE,qBAAKE,UAAU,YAAf,SACA,sBAAKA,UAAU,QAAQC,GAAG,UAA1B,UACM,sBAAKD,UAAU,QAAf,UACI,sBAAMA,UAAU,QAAQ,aAAW,OAAnC,SAA2C1B,IAC3C,sBAAM0B,UAAU,QAAhB,qBAGJ,sBAAKA,UAAU,QAAf,UACI,sBAAMA,UAAU,QAAQ,aAAW,QAAnC,SAA4CxB,IAC5C,sBAAMwB,UAAU,QAAhB,sBAGJ,sBAAKA,UAAU,QAAf,UACI,sBAAMA,UAAU,QAAQ,aAAW,OAAnC,SAA2CtB,IAC3C,sBAAMsB,UAAU,QAAhB,wBAGJ,sBAAKA,UAAU,QAAf,UACI,sBAAMA,UAAU,QAAQ,aAAW,OAAnC,SAA2CpB,IAC3C,sBAAMoB,UAAU,QAAhB,gC,MCvDhBE,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.6a0bcce1.chunk.js","sourcesContent":["import React, { useRef, useState } from \"react\";\nimport { useEffect } from \"react\";\n\nconst App = () => {\n  const [timerDays, setTimerDays] = useState('00')\n  const [timerHours, setTimerHours] = useState('00')\n  const [timerMins, setTimerMins] = useState('00')\n  const [timerSecs, setTimerSecs]= useState('00')\n\n  let interval = useRef()\n  const startTimer = () => {\n    const count = new Date(\"Sep 5, 2021 00:00:00\").getTime()\n    interval = setInterval(() => {\n      const now = Date.now()\n      const distans =  now - count\n      const renderDays = Math.floor(distans / (1000 * 60 * 60 * 24));\n      const renderHours = Math.floor(\n        (distans % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\n      );\n      const renderMins = Math.floor((distans % (1000 * 60 * 60)) / (1000 * 60));\n      const renderSecs = Math.floor((distans % (1000 * 60)) / 1000);\n      if (distans < 0) {\n        clearInterval(interval.current)\n      } else {\n        setTimerDays(renderDays)\n        setTimerHours(renderHours)\n        setTimerMins(renderMins)\n        setTimerSecs(renderSecs)\n      }\n    }, 1000)\n    \n  }\nuseEffect(() => {\n  startTimer();\n  return () => {\n    clearInterval(interval.current)\n  }\n})\n\n  return (\n    <>\n      <div className='container'>\n      <div className=\"timer\" id=\"timer-1\">\n            <div className=\"field\">\n                <span className=\"value\" data-value=\"days\">{timerDays}</span>\n                <span className=\"label\">Days</span>\n            </div>\n        \n            <div className=\"field\">\n                <span className=\"value\" data-value=\"hours\">{timerHours}</span>\n                <span className=\"label\">Hours</span>\n            </div>\n        \n            <div className=\"field\">\n                <span className=\"value\" data-value=\"mins\">{timerMins}</span>\n                <span className=\"label\">Minutes</span>\n            </div>\n        \n            <div className=\"field\">\n                <span className=\"value\" data-value=\"secs\">{timerSecs}</span>\n                <span className=\"label\">Seconds</span>\n            </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}